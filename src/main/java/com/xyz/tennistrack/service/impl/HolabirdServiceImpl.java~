package com.xyz.tennistrack.service.impl;

import com.xyz.tennistrack.config.UserAgents;
import com.xyz.tennistrack.dto.retailerDto.HolabirdDTO;
import com.xyz.tennistrack.model.Entity.EntityMapper;
import com.xyz.tennistrack.model.Entity.Product;
import com.xyz.tennistrack.model.enums.Brand;
import com.xyz.tennistrack.model.enums.ProductType;
import com.xyz.tennistrack.model.enums.Retailer;
import com.xyz.tennistrack.model.Entity.Racquets;
import com.xyz.tennistrack.repository.ProductRepository;
import com.xyz.tennistrack.repository.RacquetRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;

@Service
public class HolabirdServiceImpl {

    private final RestTemplate rt;
    private final ProductRepository productRepository;
    private final RacquetRepository racquetRepository;

    @Value("${holabird.url}")
    private String url;
    private Map<ProductType, String> productTypes;

    @Autowired
    public HolabirdServiceImpl(RestTemplate rt, ProductRepository productRepository, RacquetRepository racquetRepository) {
        this.rt = rt;
        this.productRepository = productRepository;
        this.racquetRepository = racquetRepository;
    }

    //initialize the product types into a map
    private Map<ProductType, String> initProductTypes() {
        if (productTypes == null) {
            productTypes = new HashMap<>();

            for (ProductType type : ProductType.values()) {
                switch (type) {
                    case RACQUETS -> productTypes.putIfAbsent(type, "Tennis Racquets");
//                    case PICKLEBALL -> productTypes.get(type).add("Pickleball Paddles");
//                    case SHOES -> productTypes.get(type).add("Shoe Deals");
//                    case BAGS -> productTypes.get(type).add("Tennis Bags");
//                    case ACCESSORIES -> productTypes.get(type).add("Tennis Accessories");
//                    case STRINGS -> productTypes.get(type).add("Tennis Strings");
//                    case EQUIPMENT -> productTypes.get(type).add("Stringing Machines");
                }
            }
        }

        return productTypes;
    }

    private HttpEntity<String> getHeaders() {
        HttpHeaders headers = new HttpHeaders();
        //headers.set("authority", "searchserverapi.com");
        headers.set("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
        headers.set("accept-Language", "en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7");
        headers.set("referer", "https://www.holabirdsports.com/");
        headers.set("user-agent", UserAgents.getAgent());

        return new HttpEntity<>(headers);
    }

    private Map<String, String> getRequestParams(ProductType type, int index) {

        Map<String, String> params = new LinkedHashMap<>();
        params.put("facets", "true");
        params.put("maxResults", "250");
        params.put("queryBy[collections]", productTypes.get(type));
        params.put("q", "ALLDEALS");
        params.put("restrictBy[discount]", "5,100");
        params.put("startIndex", index + "");

        return params;

    }

    private String createUrlWithParams(Map<String, String> params) {

        String createParamUrl = url;

        //build the custom url with the query parameters
        for (String param : params.keySet()) {
            createParamUrl += "&" + param + "=" + params.get(param);
        }
        return createParamUrl;
    }


    public int getAllProducts() {
        //initialize productTypes with map of all product types
        productTypes = initProductTypes();

        List<Product> products = new ArrayList<>();

        for (ProductType type : productTypes.keySet()) {

            //build the custom url with the query parameters
            String completeUrl = createUrlWithParams(getRequestParams(type, 0));

            //ParameterizedTypeReference<HolabirdDTO<Racquets>> responseType = new ParameterizedTypeReference<>() {};
            //ResponseEntity<HolabirdDTO<Racquets>> response = rt.exchange(url, HttpMethod.GET, getHeaders(), responseType);
            HolabirdDTO holabirdDTO = rt.exchange(completeUrl, HttpMethod.GET, getHeaders(), HolabirdDTO.class).getBody();
            holabirdDTO.setType(type);
            holabirdDTO.setRetailer(Retailer.HOLABIRD);

            //create entities from dto for persistence
            List<Product> productEntities = toProductEntityFromHolabirdDto(holabirdDTO);

            products.addAll(productEntities);
        }

        return saveAllProducts(products);
    }



    private <T extends Product> List<T> toProductEntityFromHolabirdDto(HolabirdDTO holabirdDTO) {
        List<Product> products = new ArrayList<>();
        ProductType type = holabirdDTO.getType();

        holabirdDTO.getItems().forEach(e -> {

                    if (e.getVariants() != null) {

                        for (HolabirdDTO.Items.Variants v : e.getVariants()) {
                            Product product = createProductEntity(v, type);
                            products.add(product);
                            product.setMsrp(Double.parseDouble(e.getList_price()));
                            product.setTitle(e.getTitle());
                            product.setPrice(Double.parseDouble(e.getPrice()));
                            product.setDiscount(Double.parseDouble(e.getDiscount()));
                            product.setBrand(Brand.getBrandByName(e.getVendor()));
                            product.setProductType(type);

                        }
                    }
                });

        return (List<T>) products;
    }

    private <T extends Product> T createProductEntity(HolabirdDTO.Items.Variants item, ProductType productType) {

        switch (productType) {
            case RACQUETS -> {
                Racquets racquets = new Racquets();
                racquets.setId(item.getVariant_id());
                racquets.setList_price(Double.parseDouble(item.getList_price()));
                racquets.setQuantity_total(Double.parseDouble(item.getQuantity_total()));
                racquets.setPrice(Double.parseDouble(item.getPrice()));
                racquets.setMsrp(Double.parseDouble(item.getList_price()));
                racquets.setProductType(productType);
                racquets.setRetailer(Retailer.HOLABIRD);

                racquets.setOptions(Racquets.Options.builder()
                        .size(item.getOptions().getSize())
                        .color(item.getOptions().getColor())
                        .build());

                return (T) racquets;
            }
        }
        return null;
    }



    /**
     * Database CRUD operations
     **/

    private <T extends Product> int saveAllProducts(List<T> products) {
        return productRepository.saveAll(products).size();
    }





    //TODO
    //fetching is capped at 250 products (not including variants)
    //implement pagination
    //work on racquets data only

    //findAll
    //findByType
    //findById



}
